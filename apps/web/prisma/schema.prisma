// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          String @id @default(cuid())
  cik         String @unique
  ticker      String?
  name        String
  description String?
  sic         String?   // Standard Industrial Classification
  industry    String?
  filings     Filing[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ticker])
  @@index([name])
  @@index([industry])
  @@map("companies")
}

model Filing {
  id               String   @id @default(cuid())
  accessionNumber  String   @unique
  filingDate       DateTime
  reportDate       DateTime
  formType         String
  companyName      String
  fileSize         Int?
  documentCount    Int?
  period           String?   // Fiscal period (Q1, Q2, Q3, FY)
  fiscalYear       Int?
  
  company   Company @relation(fields: [cik], references: [cik])
  cik       String
  sections  Section[]
  // Note: Sections used for metadata only, content fetched on-demand
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([formType])
  @@index([filingDate])
  @@index([reportDate])
  @@index([fiscalYear])
  @@index([cik, formType])
  @@index([formType, filingDate])
  @@map("filings")
}

model Section {
  id          String @id @default(cuid())
  title       String
  content     String
  sectionType String
  order       Int
  itemNumber  String?   // e.g., "1A", "7", "2.02" for structured sections
  wordCount   Int?
  contentHash String?   // For deduplication
  
  filing   Filing @relation(fields: [filingId], references: [id], onDelete: Cascade)
  filingId String
  // Note: No chunks needed - content processed on-demand
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sectionType])
  @@index([itemNumber])
  @@index([filingId, sectionType])
  @@index([contentHash])
  @@map("sections")
}

// NOTE: Chunk model removed - using tool-first architecture with on-demand processing
// No content storage needed, everything fetched and processed in real-time

model Answer {
  id           String @id @default(cuid())
  question     String
  answer       String
  sources      Json
  queryType    String    // "company-specific" | "thematic" | "hybrid"
  responseTime Int?      // Response time in milliseconds
  confidence   Float?    // Confidence score 0-1
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([queryType])
  @@index([createdAt])
  @@map("answers")
}